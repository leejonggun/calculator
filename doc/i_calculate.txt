//Written bu Joseph

static int i_add (int left_value, int right_value)
	left_valueとright_valueの足した結果を返す
static int i_sub (int left_value, int right_value)
	left_valueとright_valueの引いた結果を返す
static int i_mul (int left_value, int right_value)
	left_valueとright_valueの掛けた結果を返す
static int i_div (int left_value, int right_value)
	left_valueとright_valueの割った結果を返す
static int i_pow (int left_value, int right_value)
	left_valueをright_valueの回数だけ累乗した結果を返す
static int i_fac (int left_value, int right_value)
	left_valueの階乗したした結果を返す

static int (*i_func[])(int, int) = { i_add, i_sub, i_mul, i_div, i_pow, i_fac };
	関数ポインタとして登録する。それぞれOPERATORトークンのcounterに対応する。

//remove token->cdr, token->cdr->cdr because they have been calculated.
static token_t *remake_tree(token_t *token)
	token->cdr->carに格納されている演算子とtoken->cdr->cdr->carに格納されている数字は計算されたのでフリーして
	ツリーを作り直す。

/*This function is to calculate left_token and right_token*/
int int_calc(token_t *token) {
	token->carの数字とtoken->cdr->cdr->carの数字をtoken->cdr->carに格納されている演算子で計算する。
	型は全てint値なので、結果もint値になる。

/*calculate multiplication and division first.
 And remake AST. After this function, The operator in AST will be only + and -*/	
void i_calculate_priority(token_t *token)
	掛け算、割り算、階乗、累乗を足し算、引き算より先に計算する。
	return値はなし。計算したトークンはフリーしてツリーを小さくしていく。


/*calculate addition and subtraction.*/
token_t *i_calculate(token_t *token)
	i_calculate_priorityの実行後、残った足し算や引き算の計算をする。
	return値は計算結果を持ったINTタイプを持ったトークン

なお、f_calculate.cについては型がdoubleになっただけで、i_calculate.cと全く同じ処理を行う。
